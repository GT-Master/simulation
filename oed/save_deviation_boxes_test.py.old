import os.path
import warnings
import numpy as np

import logging
logger = logging.getLogger(__name__)

import measurements.po4.wod.data.io
from measurements.po4.wod.data.results import Measurements_Unsorted
from measurements.po4.wod.deviation.model import Deviation_Model
import measurements.util.map

from ndop.model.constants import METOS_X_DIM, METOS_Y_DIM, METOS_Z
from constants import MEASUREMENTS_BOXES_DICT_FILE, MEASUREMENTS_BOXES_DEVIATIONS_FILE, MEASUREMENTS_BOXES_DEVIATIONS_MIN_MEASUREMENTS, MEASUREMENTS_BOXES_DEVIATIONS_TIME_DIM

logging.basicConfig(level=logging.DEBUG)
    
minimum_measurements = 5
t_dim = 52
measurements_file=MEASUREMENTS_BOXES_DICT_FILE


    
## prepare points
masked_map = measurements.util.map.init_masked_map()
sea_indices = np.array(np.where(np.logical_not(np.isnan(masked_map)))).transpose()
points = np.array((0.33,) + tuple(sea_indices[0]))

## calculate deviation
deviation_model = Deviation_Model(minimum_measurements=minimum_measurements, separation_values=(1./t_dim, None, None, None), t_range=[0, 1], x_range=[0, METOS_X_DIM], measurements_file=measurements_file, convert_spherical_to_cartesian=False)
partitioning_number = 1
with warnings.catch_warnings(record=True) as w:
    warnings.simplefilter("always")
    deviation = deviation_model.deviation(points, partitioning_number=partitioning_number)
print('deviation is: {} with partitioning_number: {}'.format(deviation, partitioning_number))

print('Printing warnings ...')
for w_i in w:
    print(w_i)
print('... warnings printed.')

    